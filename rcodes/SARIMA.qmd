---
title: "SARIMA Models"
author: "Dr. Cohen"
format: html
self-contained: true
editor: visual
execute: 
  warning: false
  message: false
---

Time Series analysis using Seasonal AutoRegressive Integrated Moving Average models. The SARIMA(p,d,q)x(P,D,Q)s is given by:

$$
\phi(B) \Phi(B^s) (1-B^s)^D (1-B)^d X_t = \theta(B) \Theta(B^s) Z_t, \qquad Z_t \sim WN(0,\sigma^2)
$$

### Chicken Data

```{r}
library(car)
library(ltsa)
library(itsmr)
library(astsa)
library(itsmr)
library(forecast)

# plot
plot(chicken,type="o")
# ACF plot
acf(chicken,lag.max = 100)
# data model
M=c("diff",1,"diff",12)
r = Resid(chicken,M)
test(r)
```

### Test stationary

```{r}
# Augmented Dickey-Fuller Test
# H0: X_t is a non-stationary time series
# H1: X_t is a stationary time series

library(aTSA)
adf.test(r)
# Results in stationary data. No differencing is needed.
```

### SARIMA models

```{r}
# Potential Values
# based on the PACF
# p = 0, 1, 2
# P = 0, 1, 2
# based on the ACF
# q = 0, 1, 2, 3, 9, 10, 11
# Q = 0, 1, 2,
# Eliminate Trend and Season
# d = 1
# D = 1

# SARIMA (1,1,1)x(1,1,1)12
fit1 = arima(chicken,
            order = c(1,1,1),
            seasonal = list(order=c(1,1,1),period=12))
test(fit1$residuals)
confint(fit1)
fit1

# SARIMA (1,1,1)x(2,1,1)12
fit2 = arima(chicken,
            order = c(1,1,1),
            seasonal = list(order=c(2,1,1),period=12))
test(fit2$residuals)
confint(fit2)
fit2
# Auto fit
bestmodel = auto.arima(chicken, trace= TRUE)
test(bestmodel$residuals)

# SARIMA (2,1,1)x(0,1,1)12
fit3 = arima(chicken,
            order = c(2,1,1),
            seasonal = list(order=c(0,1,1),period=12))
test(fit3$residuals)
confint(fit3)
fit3

# SARIMA (1,1,1)x(0,1,1)12
fit4 = arima(chicken,
            order = c(1,1,1),
            seasonal = list(order=c(0,1,1),period=12))
test(fit4$residuals)
confint(fit4)
fit4

# SARIMA (1,1,0)x(0,1,1)12
fit5 = arima(chicken,
            order = c(1,1,0),
            seasonal = list(order=c(0,1,1),period=12))
test(fit5$residuals)
confint(fit5)
#fit5 is not adequate
fit5

## Compare
AIC.values = c(
      AutoModel = bestmodel$aic,
       fit1 = fit1$aic,
       fit2 = fit2$aic,
       fit3 = fit3$aic,
       fit4 = fit4$aic
      )
AIC.values
```

The equation of fit3: SARIMA(2,1,1)x(0,1,1)12 is:

$$
(1-0.861B+0.195B^2)(1-B)(1-B^{12})X_t = (1 + 0.021B)(1-0.886B^{12})Z_t, \qquad Z_t \sim WN(0,0.329)
$$

The equation of fit2: SARIMA (1,1,1)x(2,1,1)12 is:

$$
(1-0.614B)(1+0.091B^{12}+0.232B^{24})(1-B)(1-B^{12})X_t = (1 + 0.226B)(1-0.765B^{12})Z_t, \qquad Z_t \sim WN(0,0.3227)
$$

## Forecasting with Time Series

```{r}
chicken_train = chicken[1:178]


# SARIMA (1,1,1)x(1,1,1)12
fit1 = arima(chicken_train,
            order = c(1,1,1),
            seasonal = list(order=c(1,1,1),period=12))

# SARIMA (1,1,1)x(2,1,1)12
fit2 = arima(chicken_train,
            order = c(1,1,1),
            seasonal = list(order=c(2,1,1),period=12))

# Auto fit
bestmodel = auto.arima(chicken_train, trace= TRUE)
bestmodel = arima(chicken_train, order = c(2,1,1))
# SARIMA (2,1,1)x(0,1,1)12
fit3 = arima(chicken_train,
            order = c(2,1,1),
            seasonal = list(order=c(0,1,1),period=12))

# SARIMA (1,1,1)x(0,1,1)12
fit4 = arima(chicken_train,
            order = c(1,1,1),
            seasonal = list(order=c(0,1,1),period=12))

# SARIMA (1,1,0)x(0,1,1)12
fit5 = arima(chicken_train,
            order = c(1,1,0),
            seasonal = list(order=c(0,1,1),period=12))
```

Forecasting using the forecast function.

```{r}
f1 = aTSA::forecast(object = fit1,lead = 2,output = FALSE)
f2 = aTSA::forecast(object = fit2,lead = 2,output = FALSE)
f3 = aTSA::forecast(object = fit3,lead = 2,output = FALSE)
f4 = aTSA::forecast(object = fit4,lead = 2,output = FALSE)
f5 = aTSA::forecast(object = fit5,lead = 2,output = FALSE)
f.auto = aTSA::forecast(object = bestmodel,lead = 2,output = FALSE)
```

Evaluate the performance of the forecasting:

```{r}
MAPE1 = mean(abs(chicken[179:180]-f1[,2])/chicken[179:180])*100
MAPE2 = mean(abs(chicken[179:180]-f2[,2])/chicken[179:180])*100
MAPE3 = mean(abs(chicken[179:180]-f3[,2])/chicken[179:180])*100
MAPE4 = mean(abs(chicken[179:180]-f4[,2])/chicken[179:180])*100
MAPE5 = mean(abs(chicken[179:180]-f5[,2])/chicken[179:180])*100
MAPEauto = mean(abs(chicken[179:180]-f.auto[,2])/chicken[179:180])*100


MAPEs = c(fit1_mape = MAPE1,
          fit2_mape = MAPE2,
          fit3_mape = MAPE3,
          fit4_mape = MAPE4,
          fit5_mape = MAPE5,
          fitauto_mape = MAPEauto)
MAPEs
```

### Wine Data: using Fixed Argument in arima()

```{r}
plot(wine,type="o")
# ACF plot
acf(wine,lag.max = 100)
# data model
M=c("diff",1,"diff",12)
r = Resid(sqrt(wine),M) # sqrt based on Box-Cox Transformation
test(r)
adf.test(r)
# d=1 and D=1
# p = 0 1 2 3 4 7 11
# P = 0 1
# q = 0 1 5 10
# Q = 0 1 

automodel = auto.arima(y = sqrt(wine),trace = TRUE, seasonal = TRUE)

fit1 = arima(wine, order = c(2,1,5) ,
            seasonal = list(order=c(0,1,1),period=12), fixed = c(NA,0,0,0,NA,0,0,NA))
test(fit1$residuals)
confint(fit1)

```

### US employment data

```{r}
library(fpp3)

us_empl = us_employment %>% 
  filter(year(Month)>2009, Title=="All Employees, Total Nonfarm") %>%
  select(-Series_ID)
 
us_empl %>% 
  autoplot(Employed)

auto.arima(us_empl$Employed)

empl_data = us_empl$Employed

acf(empl_data,lag.max = 100)

M = c("diff",1,"diff",12)
r = Resid(empl_data,M)
test(r)

```
